1: Crear un recurso SendGrid y crear/obtener la api_key (Ojo! copiar y guardar link que lo muestra por unica vez)
2: Crear un recurso Azure Function
3: Crear un usuario en Azure Active Directory y en Azure Data Factory otorgarle permisos de lectura 
4: En Azure Function crear variables de entorno
    USR_AZURE_TENANT_ID: TENANT_ID del usuario creado
    USR_AZURE_CLIENT_ID: CLIENT_ID del usuario creado
    USR_AZURE_KEY: AZURE_KEY del usuario creado
    ADF_RESOURCE_GROUP_NAME: Nombre del grupo de recursos
    ADF_NAME: Nombre del recurso DataFactory
    SENDGRID_API_KEY: Api_key de SendGrid (punto 1)
5: Desde Visual Studio Code local conectarse a Azure Function a través de la extensión
6: Realizar el deploy de la API y obtener el link (click derecho, copy function URL)
7: Ir a Data Factory
	a: crear Linked Service
		*Aclaracion: el link que pide es el link del recurso ej: https://testpifunctions.azurewebsites.net/
					 tambien solicita api_key(token), se obtiene en el portal azure, en el recurso
	b: crear Activity Azure Function dentro de un Pipeline
	c: Settings del Activity
		1: en Name se completa con nombre de la function app ej: SendGridMail
		2: el metodo es POST
		3: en header se coloca 
			Content-Type = application/json
		4: en el body
		*CASO DE EJECUCION FALLADA
		{
			"from_email": "GDM-DataFactory@example.com",
			"to_emails": ["jbiltes@piconsulting.com.ar","exampleMail2@gmail.com"],
			"subject": "Error Data Factory: @{pipeline().DataFactory} - Pipeline: @{pipeline().Pipeline}",
			"html_content": "<p><strong>ADVERTENCIA: ¡No responder este mail! </strong><br><br><strong>Se produjo un error en el Data Factory:</strong> @{pipeline().DataFactory}<br>\n<strong>En el Pipeline:</strong>@{pipeline().Pipeline}<br>\n<strong>En el Trigger:</strong> @{pipeline().TriggerName}<br>\n<strong>En la hora:</strong> @{formatDateTime(addhours(utcnow(),-3),'dd/MM/yyyy HH:mm:ss')} <br><br>Favor de comunicarse con el administrador.<br>\n</p>",
			"is_failed": "True" 
			"pipeline_data":{
				"run_id": "@{pipeline().RunId}",
				"start_time": "@{formatDateTime(addhours(utcnow(),-27),'MM/dd/yyyy HH:mm:ss')}",
				"end_time": "@{formatDateTime(addhours(utcnow(),27),'MM/dd/yyyy HH:mm:ss')}"
			}
		}

		*CASO DE EJECUCION EXITOSA
		{
			"from_email": "GDM-DataFactory@example.com",
			"to_emails": ["jbiltes@piconsulting.com.ar","exampleMail2@gmail.com"],
			"subject": "Ejecucion Data Factory: @{pipeline().DataFactory} - Pipeline: @{pipeline().Pipeline}",
			"html_content": "<p><strong>ADVERTENCIA: ¡No responder este mail! </strong><br><br><strong>Se ejecuto correctamente un pipeline en el Data Factory:</strong> @{pipeline().DataFactory}<br>\n<strong>Pipeline:</strong>@{pipeline().Pipeline}<br>\n<strong>Trigger:</strong> @{pipeline().TriggerName}<br>\n<strong>Fecha y hora:</strong> @{formatDateTime(addhours(utcnow(),-3),'dd/MM/yyyy HH:mm:ss')} <br><br>Saludos.<br>\n</p>",
			"is_failed": "False" 
		}
	d: asociar Activity Azure Function con el resto de las activities para FAILURE o EXITO según corresponda
	
Nota: La API puede extraer mas logs de los que muestra. Todo lo que se observe en seccion "Monitor".
	  Actualmente (v1 29/10/2019) esta desarrollada para mostrar el log error del ultimo activity fallado.
